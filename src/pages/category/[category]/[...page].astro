---
import type { GetStaticPathsOptions, Page } from "astro";
import config from "~config";
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "~/layouts/BaseLayout.astro";
import PostTitle from "~/components/PostTitle.astro";
import ArchiveTaxonomy from "~/components/ArchiveTaxonomy.astro";
import BlogCard from "~/components/BlogCard.astro";
import Pagination from "~/components/Pagination.astro";
import { tagsAndCounts } from "~/helpers/taxonomies";
import { capitalize } from "~/helpers/typography";

type Params = {
	category: string;
};

const { category } = Astro.params as Params;

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
	const allPosts = await getCollection(
		"blog",
		({ data }) => data.publishDate <= new Date(),
	);

	const allcategories = allPosts.flatMap((post) => post.data.category);
	const uniqueCategories = [...new Set(allcategories)];

	const sortedPosts = allPosts.sort(
		(a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime(),
	);

	const paths = uniqueCategories.flatMap((category) => {
		const categoryPosts = sortedPosts.filter(
			(post) => post.data.category === category,
		);
		return paginate(categoryPosts, {
			params: {
				category,
			},
			props: {
				category,
				posts: categoryPosts,
			},
			pageSize: config.postsPerPage,
		});
	});
	return paths;
}

type Props = {
	page: Page<CollectionEntry<"blog">>;
};
const { page }: Props = Astro.props;

const allPages = [...Array(page.lastPage).keys()].map((num) => {
	return `/category/${category}${num === 0 ? "" : `/${String(num + 1)}`}`;
});
const title = ["All Posts in the", `${capitalize(category)} Category`];
const description = `A list of all posts available in the ${capitalize(
	category,
)} category.`;

const tags = tagsAndCounts(category);
---

<BaseLayout title={`${capitalize(category)} Posts`} {description} type="single">
	<PostTitle title={title} />
	<ArchiveTaxonomy {tags} />
	<main>
		<ul>
			{
				page.data.map((post) => {
					return (
						<li>
							<BlogCard {post} />
						</li>
					);
				})
			}
		</ul>
		<Pagination allPages={allPages} page={page} />
	</main>
</BaseLayout>

<style>
	@import "open-props/media" layer(base.media);
	@layer layout {
		main {
			grid-column: md-start / toc-end;
			grid-row: md;
			background-color: var(--surface-1);
			container: main / inline-size;
		}
	}
	@layer component {
		ul {
			display: grid;
			grid-template-columns: repeat(
				auto-fill,
				[col-start] minmax(30ch, 1fr) [col-end]
			);
			grid-template-rows: repeat(
				auto-fill,
				[row-start] minmax(auto, 100%) [row-end]
			);
			padding-block-end: 2em;
			padding-inline: 0;
			gap: 1em;
			@media (--sm-n-above) {
				gap: 3vi;
			}
		}
		li {
			list-style: none;
			padding: 0;
			margin: 0;
		}
	}
</style>
