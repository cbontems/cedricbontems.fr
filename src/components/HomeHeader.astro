---
import type { CollectionEntry } from "astro:content";
import { getEntryBySlug } from "astro:content";
import { format } from "date-fns";
import HomeAuthorBlock from "~/components/HomeAuthorBlock.astro";
import Header from "~/components/Header.astro";
import PostCategories from "./PostCategories.astro";

type Props = {
	post: CollectionEntry<"blog">;
};

const { post } = Astro.props;

const { data, render } = post;

const authors = await Promise.all(
	data.authors.map((author) => getEntryBySlug("authors", author)),
).then((authors) => authors.filter(Boolean) as CollectionEntry<"authors">[]);

const displayedCategories =
	post.data.categories.length >= 3
		? post.data.categories.slice(0, 3)
		: post.data.categories;
const remainingCategories =
	post.data.categories.length > 3 ? post.data.categories.slice(3) : [];
if (remainingCategories.length > 0) {
	displayedCategories.pop();
	displayedCategories.push(
		`+ ${remainingCategories.length + 1} more...:/posts/${post.slug}/`,
	);
}
---

<div id="clipGrid">
	<div class="fullWidthGrid">
		<div id="undercutGrid" aria-hidden="true">
			<Header />
			<hgroup>
				<h1>
					{data.title}
				</h1>
				<div class="body">
					<div class="by">
						{
							authors.map((author) => (
								<HomeAuthorBlock
									author={author}
									publishDate={data.publishDate}
									hero={true}
								/>
							))
						}
					</div>
					<PostCategories categories={displayedCategories} showTitle={false} />
				</div>
			</hgroup>
		</div>
	</div>

	<div id="undercut" role="presentation"></div>
	<div class="fullWidthGrid">
		<div id="overcutGrid" aria-hidden="false">
			<Header theme="dark" />
			<hgroup class="dark">
				<h1>
					<a
						id="skip-destination"
						aria-label={`${post.data.title}, authored by ${authors.map(
							(author) => author.data.name,
						)}, published on ${format(post.data.publishDate, "MMMM d, yyyy")}`}
						href={`/posts/${post.slug}/`}
						rel="prefetch">{post.data.title}</a
					>
				</h1>
				<div class="body">
					<div class="by">
						{
							authors.map((author) => (
								<HomeAuthorBlock
									author={author}
									publishDate={data.publishDate}
									theme="dark"
									hero={true}
								/>
							))
						}
					</div>
					<PostCategories
						categories={displayedCategories}
						showTitle={false}
						theme={"dark"}
					/>
				</div>
			</hgroup>
		</div>
	</div>
</div>

<style>
	@import "~/styles/media.css";

	div#clipGrid,
	div.fullWidthGrid,
	div#undercutGrid,
	div#overcutGrid {
		margin: 0;
		padding: 0;
		border: 0;
		vertical-align: baseline;
		display: grid;
	}
	div#clipGrid {
		padding-block-end: var(--size-1);
		grid-column: 1 / -1;
	}

	div.fullWidthGrid {
		grid-row: 1;
		grid-column: 1;
		grid-template-columns: var(--site-columns);
		position: relative;
	}
	div#undercutGrid,
	div#overcutGrid {
		align-items: center;
		grid-template-columns: var(--site-columns);
		grid-column: 1 / -1;
		padding-block-end: var(--size-10);
	}
	div#overcutGrid {
		height: 100%;
		transition-duration: 0.6s;
		transition-property: clip-path, opacity;
		transition-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
		opacity: 1;
	}
	div#undercut {
		position: absolute;
		margin: 0;
		padding: 0;
		border: 0;
		vertical-align: baseline;
		z-index: -1;
		block-size: 23%;
		min-block-size: 60dvh;
		inline-size: 100%;
		transition-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
		transition-duration: 0.9s;
		transition-property: clip-path, opacity;
		left: 0;
		background-color: var(--_curtains);
		clip-path: polygon(0 0, 100% 0, 100% 100%, 0 59%);
		grid-row: 1;
		grid-column: 1;
	}

	hgroup {
		display: grid;
		grid-template-columns: 3fr 1fr;
		grid-column: 1/-1;

		gap: var(--size-8);
		padding-block-start: var(--size-11);
		margin-inline: var(--size-3);
		color: var(--black);
		@media (--md-n-above) {
			grid-column: 2/-2;
		}
		& h1 {
			font-size: clamp(2rem, 5vw + 1rem, 4rem);
			grid-column: 1/-1;
			& a[href] {
				color: var(--black);
				text-decoration: none;
				&:visited {
					color: var(--black);
				}
				&:hover {
					text-decoration: underline;
				}
			}
		}
		& p {
			grid-column: 1 / -1;
			margin-block-end: clamp(16px, 4vw, 52px);
			font-size: clamp(1.25rem, 2vw + 1rem, 2.5rem);
			@media (--md-n-above) {
				grid-column: 1 / 3;
			}
		}
	}
	hgroup.dark {
		color: var(--always-white);
		& h1 a[href] {
			color: var(--always-white);
			&:visited {
				color: var(--always-white);
			}
		}
	}
	div.body {
		isolation: isolate;
		max-inline-size: var(--size-content-3);
		display: flex;
		flex-direction: column;
		gap: var(--size-6);
		justify-content: space-between;
		@media (--md-n-above) {
			flex-direction: row;
		}
	}
	div.by {
		display: grid;
		grid-auto-flow: row;
		gap: 20px;
	}
</style>

<script>
	const prefersReducedMotion = window.matchMedia(
		"(prefers-reduced-motion: reduce)",
	);
	const clipGridEl: HTMLDivElement | null = document.querySelector("#clipGrid");
	const overcutGridEl: HTMLDivElement | null =
		document.querySelector("#overcutGrid");
	const undercutGridEl: HTMLDivElement | null =
		document.querySelector("#undercutGrid");
	const overcutAuthorEls: HTMLImageElement[] = Array.from(
		document.querySelectorAll(".main-story-photo"),
	);
	const undercutEl: HTMLDivElement | null = document.querySelector("#undercut");
	const themeQuery = window.matchMedia("(max-width: 760px)");

	// find all links and buttons in hiddenHeader and apply tabindex=-1
	if (undercutGridEl) {
		const undercutGridElLinks = Array.from(
			undercutGridEl.querySelectorAll("a, button"),
		);
		undercutGridElLinks.forEach((link) => {
			link.setAttribute("tabindex", "-1");
		});
	}

	function animateCutIn() {
		if (undercutEl)
			undercutEl.style.clipPath = "polygon(0 0, 100% 0, 100% 100%, 0 59%)";
		if (overcutGridEl)
			overcutGridEl.style.clipPath = "polygon(0 0, 100% 0, 100% 69%, 0% 100%)";
		if (undercutEl) undercutEl.style.opacity = "1";
		if (overcutGridEl) overcutGridEl.style.opacity = "1";
		overcutAuthorEls.forEach((el) => {
			el.style.filter = "grayscale(0%)";
			el.style.scale = "1.125";
		});
	}

	function animateCutOut() {
		if (undercutEl)
			undercutEl.style.clipPath = "polygon(0 0, 100% 0, 100% 0%, 0 0%)";
		if (overcutGridEl)
			overcutGridEl.style.clipPath = "polygon(0 0, 100% 0, 100% 0%, 0% 0%)";
		if (undercutEl) undercutEl.style.opacity = "0";
		if (overcutGridEl) overcutGridEl.style.opacity = "0";
		overcutAuthorEls.forEach((el) => {
			el.style.filter = "grayscale(100%)";
			el.style.scale = "1";
		});
	}

	/**
	 * This function handles different user states for either mobile (no animation)
	 * or user prefering reduced motion (no animation). It is used in matchMedia
	 * listeners and determines when the animations are set.
	 */
	function handleResizeAndReduceMotionChanges(
		event: MediaQueryListEvent,
		reduceMotion: MediaQueryListEvent["matches"],
	) {
		if (event.matches) {
			document.removeEventListener("mouseleave", animateCutIn);
			if (clipGridEl)
				clipGridEl.removeEventListener("mouseenter", animateCutIn);
			if (clipGridEl)
				clipGridEl.removeEventListener("mouseleave", animateCutOut);
			overcutAuthorEls.forEach((el) => {
				el.style.filter = "grayscale(0%)";
				el.style.transform = "scale(1.125)";
			});
			if (overcutGridEl) overcutGridEl.style.background = "var(--_curtains)";
			if (!reduceMotion) {
				if (overcutGridEl)
					overcutGridEl.style.clipPath =
						"polygon(0 0, 100% 0, 100% 100%, 0% 96%)";
			}
		} else {
			document.addEventListener("mouseleave", animateCutIn);
			if (clipGridEl) clipGridEl.addEventListener("mouseenter", animateCutIn);
			if (clipGridEl) clipGridEl.addEventListener("mouseleave", animateCutOut);
			if (overcutGridEl)
				overcutGridEl.style.clipPath =
					"polygon(0 0, 100% 0, 100% 69%, 0% 100%)";
			if (overcutGridEl) overcutGridEl.style.background = "var(--_curtains)";
		}
	}

	prefersReducedMotion.addEventListener("change", () => {
		if (prefersReducedMotion.matches) {
			themeQuery.removeListener(handleResizeAndReduceMotionChanges);
			handleResizeAndReduceMotionChanges({ matches: true }, true);
		} else {
			themeQuery.addListener(handleResizeAndReduceMotionChanges);
			handleResizeAndReduceMotionChanges({ matches: false });
		}
	});

	if (!prefersReducedMotion.matches) {
		handleResizeAndReduceMotionChanges(
			{ matches: window.innerWidth <= 760 },
			false,
		);
		themeQuery.addListener(handleResizeAndReduceMotionChanges);
	}
</script>
