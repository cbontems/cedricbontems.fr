---
import SearchIcon from "~/icons/SearchIcon";
export interface Props {
	placeholder: string;
	selector: string;
	groupSelector?: string;
}
const { placeholder, selector, groupSelector } = Astro.props as Props;
const inlineStyle = `
    ${selector}[hidden] {
        display: none;
    }
`;
---

<label>
	<input
		type="text"
		id="resourcesSearch"
		placeholder={placeholder}
		data-selector={selector}
		data-group-selector={groupSelector}
	/>
	<div>
		<SearchIcon width={24} aria-hidden="true" />
	</div>
	<span class="sr-only visually-hidden">Search</span>
</label>

<style set:html={inlineStyle}></style>

<script src="https://polyfill.io/v3/polyfill.min.js?features=URLSearchParams"
></script>
<script>
	/* https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/ */
	const stopWords = [
		"a",
		"an",
		"and",
		"are",
		"aren't",
		"as",
		"by",
		"can",
		"cannot",
		"can't",
		"could",
		"couldn't",
		"how",
		"is",
		"isn't",
		"it",
		"its",
		"it's",
		"that",
		"the",
		"their",
		"there",
		"they",
		"they're",
		"them",
		"to",
		"too",
		"us",
		"very",
		"was",
		"we",
		"well",
		"were",
		"what",
		"whatever",
		"when",
		"whenever",
		"where",
		"with",
		"would",
		"yet",
		"you",
		"your",
		"yours",
		"yourself",
		"yourselves",
		"the",
		"vanilla",
		"javascript",
		"js",
	];
	const input = document.getElementById("resourcesSearch") as HTMLInputElement;
	const selector = input?.dataset.selector || "article";
	const groupSelector = input?.dataset.groupSelector;
	const items = document.querySelectorAll(selector);
	const groups = groupSelector ? document.querySelectorAll(groupSelector) : [];
	const FPS_30 = 1000 / 30;

	const debounce = (callback: () => void, timeout = 150) => {
		let timer: NodeJS.Timeout;
		return (...args: any) => {
			clearTimeout(timer);
			timer = setTimeout(() => callback.apply(this, args), timeout);
		};
	};

	const updateOpen = () => {
		requestAnimationFrame(() => {
			!!input.value || document.activeElement === input
				? input.parentElement?.setAttribute("open", "")
				: input.parentElement?.removeAttribute("open");
		});
	};

	const update = () => {
		updateOpen();
		const regexMap = input.value
			.toLowerCase()
			.split(" ")
			.filter((word) => word.length && !stopWords.includes(word))
			.map((word) => new RegExp(word, "i"));
		for (const item of items) {
			const isMatch =
				!regexMap.length ||
				regexMap.some((regex) => !!item.textContent.match(regex));
			isMatch
				? item.removeAttribute("hidden")
				: item.setAttribute("hidden", "");
		}
		for (const group of groups) {
			const matchedItems = group.querySelectorAll(`${selector}:not([hidden])`);
			matchedItems.length > 0
				? group.removeAttribute("hidden")
				: group.setAttribute("hidden", "");
		}
		updateURL();
	};
	const updateURL = () => {
		const q = input.value?.trim();
		if (q) {
			const params = new URLSearchParams();
			params.set("q", q);
			window.history.replaceState(null, "", `?${params.toString()}`);
		} else {
			const [href] = window.location.href.split("?");
			window.history.replaceState(null, "", href);
		}
	};
	const hydrateQuery = () => {
		const params = new URLSearchParams(location.search);
		input.value = params.get("q") || "";
	};
	input.addEventListener("input", debounce(update, FPS_30), true);
	input.addEventListener("focus", updateOpen, true);
	input.addEventListener("blur", updateOpen, true);
	hydrateQuery();
	update();
</script>
<style>
	label {
		display: flex;
		padding: 0;
		border: var(--border) solid var(--text-1);
	}
	input {
		font-family: var(--font-body);
		padding-inline: 0.5em;
		background-color: transparent;
		outline: none;
		line-height: 2.5rem;
		width: 25ch;
	}
	input::placeholder {
		color: var(--text-2);
		opacity: 75%;
	}
	div {
		display: flex;
		align-items: center;
		justify-content: center;
		inline-size: 3rem;
		aspect-ratio: 1;
		border-radius: 0;
		border-inline-start: var(--border) solid var(--text-1);
		background-color: var(--neon);
		color: var(--surface-1);
	}
</style>
