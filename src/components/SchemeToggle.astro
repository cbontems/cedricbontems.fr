<button
	class="theme-toggle"
	id="theme-toggle"
	title="Toggles light & dark"
	aria-label="dark"
	aria-live="polite"
>
	<svg
		class="sun-and-moon"
		aria-hidden="true"
		width="24"
		height="24"
		viewBox="0 0 24 24"
	>
		<mask class="moon" id="moon-mask">
			<rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
			<circle cx="24" cy="10" r="6" fill="black"></circle>
		</mask>
		<circle
			class="sun"
			cx="12"
			cy="12"
			r="6"
			mask="url(#moon-mask)"
			fill="currentColor"></circle>
		<g class="sun-beams" stroke="currentColor">
			<line x1="12" y1="1" x2="12" y2="3"></line>
			<line x1="12" y1="21" x2="12" y2="23"></line>
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
			<line x1="1" y1="12" x2="3" y2="12"></line>
			<line x1="21" y1="12" x2="23" y2="12"></line>
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
		</g>
	</svg>
</button>

<style>
	@import "open-props/media" layer(base.media);
	@layer component {
		.theme-toggle {
			--size: 40px;
			--icon-fill: var(--surface-1);
			--icon-fill-hover: var(--neon);
			:global([data-theme="dark"]) & {
				--icon-fill: var(--text-1);
			}
			-webkit-tap-highlight-color: transparent;
			aspect-ratio: var(--ratio-square);
			background: none;
			block-size: var(--size);
			border: none;
			border-radius: var(--radius-round);
			cursor: pointer;
			inline-size: var(--size);
			padding: calc(var(--size-2) + 2px);
			touch-action: manipulation;
			outline-color: var(--surface-1);
			& > svg {
				stroke-linecap: round;
				block-size: 100%;
				inline-size: 100%;
			}
			[nojs] & {
				display: none;
			}
		}

		.sun-and-moon {
			& > :is(.moon, .sun, .sun-beams) {
				transform-origin: center center;
			}
			& > :is(.moon, .sun) {
				fill: var(--icon-fill);
			}
			& > .sun-beams {
				stroke: var(--icon-fill);
				stroke-width: 2px;
			}
			&:is(:hover, :focus-visible) {
				& :is(.sun-and-moon > :is(.moon, .sun)) {
					fill: var(--icon-fill-hover);
				}
				& :is(.sun-and-moon > .sun-beams) {
					stroke: var(--icon-fill-hover);
				}
			}
			:global([data-theme="dark"]) & {
				& > .sun {
					transform: scale(1.75);
					transition-duration: 0.25s;
					transition-timing-function: var(--ease-3);
				}
				& > .sun-beams {
					opacity: 0;
					transform: rotate(-25deg);
					transition-duration: 0.15s;
				}
				& > .moon > circle {
					transform: translateX(-7px);
					transition-delay: 0.25s;
					transition-duration: 0.5s;
					@supports (cx: 1) {
						cx: 17;
						transform: translateX(0);
					}
				}
			}
		}
		@media (--motionOK) {
			.sun-and-moon {
				& > .sun {
					transition: transform 0.5s var(--ease-elastic-out-3);
					& > .sun-beams {
						transition:
							transform 0.5s var(--ease-elastic-out-4),
							opacity 0.5s var(--ease-3);
					}
					& .moon > circle {
						transition: transform 0.25s var(--ease-out-5);
						@supports (cx: 1) {
							transition: cx 0.25s var(--ease-out-5);
						}
					}
				}
			}
		}
	}
</style>

<script>
	// theme toggle
	const getColorPreference = () => {
		if (localStorage.getItem("theme-preference"))
			return localStorage.getItem("theme-preference");
		else
			return window.matchMedia("(prefers-color-scheme: dark)").matches
				? "dark"
				: "light";
	};

	const setPreference = () => {
		localStorage.setItem("theme-preference", theme.value ?? "light");
		reflectPreference();
	};

	const reflectPreference = () => {
		document.firstElementChild?.setAttribute(
			"data-theme",
			theme.value ?? "light",
		);
		document
			.querySelector("#theme-toggle")
			?.setAttribute("aria-label", theme.value ?? "light");
	};

	const theme = {
		value: getColorPreference(),
	};

	// set early so no page flashes
	reflectPreference();

	window.onload = () => {
		// set on load so screen readers can see latest value on the button
		reflectPreference();

		document.querySelector("#theme-toggle")?.addEventListener("click", () => {
			theme.value = theme.value === "light" ? "dark" : "light";

			setPreference();
		});
	};

	window
		.matchMedia("(prefers-color-scheme: dark)")
		.addEventListener("change", ({ matches: isDark }) => {
			theme.value = isDark ? "dark" : "light";
			setPreference();
		});
</script>
