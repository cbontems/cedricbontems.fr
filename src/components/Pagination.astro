---
import type { Page } from "astro";
import type { HTMLAttributes } from "astro/types";
import { collapseRange } from "~/helpers/paginate.js";
import LeftArrowIcon from "~/icons/LeftArrowIcon";
import RightArrowIcon from "~/icons/RightArrowIcon";

export type Props = Omit<HTMLAttributes<"nav">, "slot"> & {
	page: Page<unknown>;
	allPages: string[];
	restRoute?: boolean;
};

const { page, allPages, "aria-label": ariaLabel = "Pagination" } = Astro.props;

const pages = allPages.map((href, i) => {
	return {
		pageNum: i + 1,
		text: String(i + 1),
		href,
	};
});

const collapsedPages = collapseRange(page, pages);
---

<nav aria-label={ariaLabel}>
	<ul>
		{
			page.url.prev && (
				<li class="prev">
					<a href={page.url.prev} rel="prefetch" class="pagination">
						<LeftArrowIcon
							aria-label={`Go to page ${page.currentPage - 1} of ${
								page.lastPage
							}`}
						/>
					</a>
				</li>
			)
		}
		{
			collapsedPages.map((link) => (
				<li class="link">
					{!link.href ? (
						<p>{link.text}</p>
					) : (
						<a
							href={link.href + "/"}
							class="pagination"
							aria-current={
								link.pageNum === page.currentPage ? "page" : undefined
							}
						>
							{link.pageNum}
						</a>
					)}
				</li>
			))
		}
		<li class="small">
			<p aria-current="page">Page {page.currentPage} of {page.lastPage}</p>
		</li>
		{
			page.url.next && (
				<li class="next">
					<a href={page.url.next} rel="prefetch" class="pagination">
						<RightArrowIcon
							aria-label={`Go to page ${page.currentPage + 1} of ${
								page.lastPage
							}`}
						/>
					</a>
				</li>
			)
		}
	</ul>
</nav>

<style>
	@import "open-props/media" layer(base.media);
	@layer component {
		nav {
			display: flex;
			justify-content: center;
			font-size: 130%;
		}
		ul {
			display: flex;
			align-items: center;
			gap: 1em;
			list-style: none;
			padding: 0;
		}
		li {
			padding: 0;
		}
		.next,
		.prev {
			border-width: var(--border);
			border-color: var(--color-bright);
			border-radius: var(--round);
			transition: background-color 145ms ease;
			& a {
				border-radius: var(--round);
				color: var(--color-bright);
				display: flex;
				align-items: center;
				justify-content: center;
				inline-size: 2em;
				block-size: 2em;
				transition: color 145ms ease;
			}
			&:hover {
				background-color: var(--color-bright);
				& a {
					color: var(--surface-1);
				}
			}
		}

		.small {
			display: block;
			@media (--sm-n-above) {
				display: none;
			}
		}

		.link {
			display: none;
			@media (--sm-n-above) {
				display: inline-block;
			}
			& a {
				color: var(--text-2);
				position: relative;
				border-radius: var(--radius);
				inline-size: 2em;
				block-size: 2em;
				display: flex;
				align-items: center;
				justify-content: center;
				border-width: var(--border);
				&:hover {
					color: var(--color-bright);
					text-decoration: none;
				}
			}
		}

		@media (--sm-n-above) {
			[aria-current="page"] {
				border-color: var(--color-bright);
			}
		}
	}
</style>
