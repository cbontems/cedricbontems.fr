---
import { CollectionEntry, getEntryBySlug } from "astro:content";
import HomeAuthorBlock from "~/components/HomeAuthorBlock.astro";
import PostCategories from "~/components/PostCategories.astro";
import { format } from "date-fns";

export type Props = {
	post: CollectionEntry<"blog">;
};

const { post } = Astro.props;

const authors = await Promise.all(
	post.data.authors.map((author) => getEntryBySlug("authors", author)),
).then((authors) => authors.filter(Boolean) as CollectionEntry<"authors">[]);

const displayedCategories =
	post.data.categories.length >= 3
		? post.data.categories.slice(0, 3)
		: post.data.categories;
const remainingCategories =
	post.data.categories.length > 3 ? post.data.categories.slice(3) : [];
if (remainingCategories.length > 0) {
	displayedCategories.pop();
	displayedCategories.push(
		`+ ${remainingCategories.length + 1} more...:/posts/${post.slug}/`,
	);
}
---

<article>
	<h3>
		<a
			aria-label={`${post.data.title}, authored by ${authors.map(
				(author) => author.data.name,
			)}, published on ${format(post.data.publishDate, "MMMM d, yyyy")}`}
			href={`/posts/${post.slug}/`}
			rel="prefetch">{post.data.title}</a
		>
	</h3><div class="body">
		<div class="by">
			{
				authors.map((author, index) => {
					return (
						<HomeAuthorBlock
							author={author}
							publishDate={
								index === authors.length - 1 ? post.data.publishDate : undefined
							}
						/>
					);
				})
			}
		</div>
		<PostCategories categories={displayedCategories} showTitle={false} />
	</div>
	<p>{post.data.description}</p>
</article>

<style>
		@import "~/styles/media.css";

	article {
		--_avatar-filter: grayscale(100%);
		--_avatar-scale: 1;
		display: grid;
		row-gap: var(--size-8);
		position: relative;
		padding-block: var(--size-8);
		padding-inline: var(--size-3);
		--border-scaleX: 102%;
		@media (--md-n-above) {
			padding-inline: var(--size-8);
		}
		@media (--xl-n-above) {
			--border-scaleX: 115%;
		}
		&::before,
		&::after {
			content: "";
			position: absolute;
			inset-inline: 0;
			inset-block-end: 0;
			block-size: 1px;
			background: var(--black);
			transition: transform 0.3s var(--ease-elastic-3);
			transform-origin: center;
		}
		&::before {
			inset-block-start: 0;
		}
		&:hover {
			--_avatar-filter: none;
			--_avatar-scale: 1.125;
			&::before,
			&::after {
				background-color: var(--black);
				transform: scaleX(var(--border-scaleX));
				block-size: 3px;
			}
		}
	}
	h3 > a[href] {
		color: var(--black);
		text-decoration: none;
		transition: color 0.3s var(--ease-elastic-3);
		&:hover {
			color: var(--brand);
			text-decoration: underline;
		}
		&::before {
			content: "";
			position: absolute;
			inset: 0;
		}
	}
	div.body {
		display: flex;
		flex-direction: column;
		gap: var(--size-8);
		justify-content: space-between;
		@media(--md-n-above) {
			flex-direction: row;
		}
	}
	div.by {
		display: grid;
		grid-auto-flow: row;
		gap: 20px;
	}
</style>
